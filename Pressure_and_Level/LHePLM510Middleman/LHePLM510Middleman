import time
import serial

heater_power = ""
pressure = ""
level = ""
last_time = time.time()
last_reconnection_time = time.time()

def open_serials():
    LHeP = serial.Serial('COM6', 9600, timeout=1)
    LM510 = serial.Serial('COM5', 9600, timeout=1)
    LHeP.flushInput()
    LHeP.flushOutput()
    LM510.flushInput()
    LM510.flushOutput()
    return LHeP, LM510

def toss_from_LHeP_to_LM510(LHeP, LM510):
    read_LHeP = LHeP.read_until(b'\r').decode().strip()
    LM510.write((read_LHeP + '\r').encode())
    return read_LHeP

def toss_from_LM510_to_LHeP(LHeP, LM510):
    read_LM510 = LM510.readline().decode().strip()
    LHeP.write((read_LM510 + '\r\n').encode())
    return read_LM510

def cal_volume(level):
    try:
        x = float(level.split(' ')[0])
    except:
        return ""
    x2 = x * x
    x3 = x2 * x
    x4 = x3 * x
    a0 = -7.70234
    a1 = 2.6769
    a2 = -0.00686
    a3 = 0.00048930
    a4 = -5.73005e-6
    try:
        return f"{(a0 + a1 * x + a2 * x2 + a3 * x3 + a4 * x4):.2f}" + " L"
    except:
        return ""

def serial_mediator():
    LHeP, LM510 = open_serials()

    while True:
        if LHeP.in_waiting:
            read_LHeP = ""
            try:
                read_LHeP = toss_from_LHeP_to_LM510(LHeP, LM510)
                read_LM510 = toss_from_LM510_to_LHeP(LHeP, LM510)
                if '?' in read_LHeP:
                    read_LM510_2 = toss_from_LM510_to_LHeP(LHeP, LM510)
                    print(f"LHeP : {read_LHeP} \t->  LM510 : {read_LM510} \t->  LM510 : {read_LM510_2}")
                else:
                    print(f"LHeP : {read_LHeP} \t->  LM510 : {read_LM510}")
            except Exception as e:
                print(f"Error : {e}")
                LHeP.close()
                LM510.close()
                LHeP, LM510 = open_serials()

            if read_LHeP == "MEAS? 1":
                global level
                level = read_LM510_2
            elif read_LHeP == "MEAS? 2":
                global pressure
                global heater_power
                pressure = read_LM510_2
                heater_power = read_LM510_2
            elif read_LHeP == "*STB?":
                pressure = ' '.join(pressure.replace('  ', ' ').split(' ')[:2])
                heater_power = ' '.join(heater_power.replace('  ', ' ').split(' ')[2:])
                global last_time
                last_time = time.time()
                global last_reconnection_time
                last_reconnection_time = time.time()
                last_time_print = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
                print(f"  Time : {last_time_print}")
                print(f"    Level : {level}")
                print(f"    Volume : {cal_volume(level)}")
                print(f"    Pressure : {pressure}")
                print(f"    Heater Power : {heater_power}")
        else:
            if time.time() - last_reconnection_time > 30 and level != "":
                print(f"Reconnecting to LHeP : in_waiting = {LHeP.in_waiting}")
                LHeP.close()
                LM510.close()
                LHeP, LM510 = open_serials()
                last_reconnection_time = time.time()
            if time.time() - last_time > 120 and level != "":
                print(f"Connection Lost with LHeP : in_waiting = {LHeP.in_waiting}")
                level = ""
                pressure = ""
                heater_power = ""
                


if __name__ == "__main__":
    import threading
    from flask import Flask, jsonify
    import logging

    app = Flask(__name__)
    log = logging.getLogger('werkzeug')
    log.setLevel(logging.ERROR)

    @app.route('/Meas', methods=['GET'])
    def Meas():
        return jsonify({'Volume': cal_volume(level), 'Pressure': pressure, 'Heater': heater_power})

    def run_flask():
        app.run(host='0.0.0.0', port=5002, use_reloader=False)
    
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()

    serial_mediator()